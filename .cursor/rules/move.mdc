---
globs: *.move
alwaysApply: false
---

## Sui Move 実装ミニルール（最低限・実務向け）

### 基本原則
- **オブジェクトモデル**: すべてはオブジェクト。`struct X has key { id: UID, ... }` を持つ型がオンチェーン実体。
- **所有権**: Owned（単一所有）/ Shared（共有）/ Immutable（不変）。用途に応じて最小限を選択。
- **エントリ関数**: `entry fun` は公開トランザクション入口。`&mut TxContext` は最後の引数。
- **アビリティ**: `copy`/`drop`/`store`/`key` を最小限に付与。`UID`は`key`オブジェクトの先頭フィールド。
- **モジュール境界**: 外部APIは安定・最小。内部は`public(friend)`や`private`で隠蔽。

### Sui特有の要点
- **オブジェクト作成/転送**: `object::new(ctx)`で`UID`生成→構造体作成→エントリ内で必ず転送（owned/共有/不変）。
- **転送API**: `transfer::transfer`（所有者へ）, `transfer::share`（共有化）, `transfer::freeze_object`（不変化）。
- **入力制約**: エントリ関数はオブジェクト参照（`&`/`&mut`）や`Coin<T>`等を取り、`TxContext`は最後。未転送の`key`オブジェクトを返り値で外へ出さない。
- **アドレス/パッケージ**: `Move.toml`の`addresses`を活用。標準は`0x2`（Sui Framework）。

### アクセス制御パターン
- **Capability**: 作成時に権限オブジェクト（例: `MintCap`）を発行し、保持者のみが特権関数を実行。
- **Witness（ゼロサイズ型）**: デプロイヤのみ生成可能な型で内部APIをガード。
- **friend**: モジュール間の限定公開に`public(friend)`。

### エラーと不変条件
- **エラー定義**: `const E_*: u64 = <code>;` をモジュール先頭で定義し、`abort E_*`で早期失敗。
- **require系**: 前提条件を最初に検証し早期リターン。整合性（例: 所有者一致、境界チェック）を常に確認。

### イベントとインデクシング
- **イベント発行**: 状態変化は`event::emit<EventType>(...)`で記録。インデクサ/フロント連携を意識して最低限の情報を出す。
- **イベント型**: 軽量・フラット・BSC序列化に優しい構造に。

### ガス/パフォーマンス（実務Tips）
- **共有オブジェクト最小化**: 共有は合意コスト高。なるべくOwnedで合成し、共有は必要部分のみに限定。
- **読み書き最小化**: 大きなベクタ/反復は避ける。ID直参照・一点更新を基本に。
- **コイン操作**: `coin::split`/`join`は最小回数に。`balance`/`treasury`活用を検討。

### アップグレード互換性（壊さないルール）
- **型の非互換変更禁止**: 構造体のフィールド追加/削除/順序変更は不可。公開関数シグネチャの破壊的変更も不可。
- **内部実装は可**: 外部可視APIを保ちながら内部ロジック最適化はOK。

### テスト/開発運用
- **ユニットテスト**: `#[test]`/`#[expected_failure]`/`#[test_only]` を活用。外部依存は最小モック。
- **命名/分割**: ファイル・モジュールは責務単位でシンプルに。過度な汎用化を避ける。
- **ログ/デバッグ**: 可能ならイベント駆動で観測。デプロイ前にテストで失敗系を網羅。

### よく使う最小サンプル
```move
module 0xYour::example {
    use 0x2::object;
    use 0x2::tx_context::{TxContext, sender};
    use 0x2::transfer;

    struct MyObj has key { id: object::UID, value: u64 }

    /// 作成して呼び出し送信者へ譲渡
    public entry fun create(value: u64, ctx: &mut TxContext) {
        let obj = MyObj { id: object::new(ctx), value };
        transfer::transfer(obj, sender(ctx));
    }
}
```

### チェックリスト（コミット前）
- [ ] `entry`の最後は`&mut TxContext`になっている
- [ ] 新規`key`オブジェクトは必ず転送/共有/凍結のいずれかを実施
- [ ] 公開APIの破壊的変更なし（型/フィールド/シグネチャ）
- [ ] エラーコードが定義済みで境界/権限チェックが先頭にある
- [ ] 共有オブジェクト入出力を最小化し、イベントで必要情報を発行